// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WareHouse.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250724101603_AddDeliveryDateOnTbOrder")]
    partial class AddDeliveryDateOnTbOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WareHouse.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WareHouse.Models.DelayOrder", b =>
                {
                    b.Property<int>("IdDelayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDelayOrder"));

                    b.Property<DateTime>("DelayDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrdersIdOrder")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDelayOrder");

                    b.HasIndex("OrdersIdOrder");

                    b.ToTable("DelayOrders");
                });

            modelBuilder.Entity("WareHouse.Models.DetailOrder", b =>
                {
                    b.Property<int>("IdDetailOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailOrder"));

                    b.Property<int>("OrdersIdOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductsIdProduct")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdDetailOrder");

                    b.HasIndex("OrdersIdOrder");

                    b.HasIndex("ProductsIdProduct");

                    b.ToTable("DetailOrders");
                });

            modelBuilder.Entity("WareHouse.Models.DetailRequest", b =>
                {
                    b.Property<int>("IdDetailRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailRequest"));

                    b.Property<int>("ItemRequestsIdItemRequest")
                        .HasColumnType("int");

                    b.Property<int>("ProductsIdProduct")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdDetailRequest");

                    b.HasIndex("ItemRequestsIdItemRequest");

                    b.HasIndex("ProductsIdProduct");

                    b.ToTable("DetailRequests");
                });

            modelBuilder.Entity("WareHouse.Models.ItemRequest", b =>
                {
                    b.Property<int>("IdItemRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItemRequest"));

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdItemRequest");

                    b.HasIndex("UsersIdUser");

                    b.ToTable("ItemRequests");
                });

            modelBuilder.Entity("WareHouse.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuppliersIdSupplier")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdOrder");

                    b.HasIndex("SuppliersIdSupplier");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WareHouse.Models.OutHistory", b =>
                {
                    b.Property<int>("IdOutHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOutHistory"));

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OutQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductsIdProduct")
                        .HasColumnType("int");

                    b.HasKey("IdOutHistory");

                    b.HasIndex("ProductsIdProduct");

                    b.ToTable("OutHistories");
                });

            modelBuilder.Entity("WareHouse.Models.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<int>("CategorysIdCategory")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SuppliersIdSupplier")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("remainingQuantity")
                        .HasColumnType("int");

                    b.HasKey("IdProduct");

                    b.HasIndex("CategorysIdCategory");

                    b.HasIndex("SuppliersIdSupplier");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WareHouse.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WareHouse.Models.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSupplier"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WareHouse.Models.TimeSheet", b =>
                {
                    b.Property<int>("IdTimeSheet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTimeSheet"));

                    b.Property<TimeSpan>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("CheckOut")
                        .HasColumnType("time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsersIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdTimeSheet");

                    b.HasIndex("UsersIdUser");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("WareHouse.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesidRole")
                        .HasColumnType("int");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.HasIndex("RolesidRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WareHouse.Models.DelayOrder", b =>
                {
                    b.HasOne("WareHouse.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersIdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WareHouse.Models.DetailOrder", b =>
                {
                    b.HasOne("WareHouse.Models.Order", "Orders")
                        .WithMany("DetailOrders")
                        .HasForeignKey("OrdersIdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WareHouse.Models.Product", "Products")
                        .WithMany("DetailOrders")
                        .HasForeignKey("ProductsIdProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WareHouse.Models.DetailRequest", b =>
                {
                    b.HasOne("WareHouse.Models.ItemRequest", "ItemRequests")
                        .WithMany("DetailRequests")
                        .HasForeignKey("ItemRequestsIdItemRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WareHouse.Models.Product", "Products")
                        .WithMany("DetailRequests")
                        .HasForeignKey("ProductsIdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemRequests");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WareHouse.Models.ItemRequest", b =>
                {
                    b.HasOne("WareHouse.Models.User", "Users")
                        .WithMany("ItemRequests")
                        .HasForeignKey("UsersIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WareHouse.Models.Order", b =>
                {
                    b.HasOne("WareHouse.Models.Supplier", "Suppliers")
                        .WithMany("Orders")
                        .HasForeignKey("SuppliersIdSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("WareHouse.Models.OutHistory", b =>
                {
                    b.HasOne("WareHouse.Models.Product", "Products")
                        .WithMany("OutHistories")
                        .HasForeignKey("ProductsIdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WareHouse.Models.Product", b =>
                {
                    b.HasOne("WareHouse.Models.Category", "Categorys")
                        .WithMany("Products")
                        .HasForeignKey("CategorysIdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WareHouse.Models.Supplier", "Suppliers")
                        .WithMany("Products")
                        .HasForeignKey("SuppliersIdSupplier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categorys");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("WareHouse.Models.TimeSheet", b =>
                {
                    b.HasOne("WareHouse.Models.User", "Users")
                        .WithMany("TimeSheets")
                        .HasForeignKey("UsersIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WareHouse.Models.User", b =>
                {
                    b.HasOne("WareHouse.Models.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RolesidRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WareHouse.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WareHouse.Models.ItemRequest", b =>
                {
                    b.Navigation("DetailRequests");
                });

            modelBuilder.Entity("WareHouse.Models.Order", b =>
                {
                    b.Navigation("DetailOrders");
                });

            modelBuilder.Entity("WareHouse.Models.Product", b =>
                {
                    b.Navigation("DetailOrders");

                    b.Navigation("DetailRequests");

                    b.Navigation("OutHistories");
                });

            modelBuilder.Entity("WareHouse.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WareHouse.Models.Supplier", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WareHouse.Models.User", b =>
                {
                    b.Navigation("ItemRequests");

                    b.Navigation("TimeSheets");
                });
#pragma warning restore 612, 618
        }
    }
}
